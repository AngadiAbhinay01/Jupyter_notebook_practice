1. Import Libraries

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

-----------------------------------------------------------------------
2. Load & Preprocess the Dataset

# Load dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Normalize the data
X_train = X_train / 255.0
X_test = X_test / 255.0

# Reshape if needed (for CNNs)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# One-hot encode labels
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

-----------------------------------------------------------------------
3. Build the Model Architecture
Create the network layers:

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(2, 2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

--------------------------------------------------------------------------
4. Compile the Model

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

--------------------------------------------------------------------------
5. Train the Model

model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)

------------------------------------------------------------------------
6. Evaluate the Model

test_loss, test_accuracy = model.evaluate(X_test, y_test)
print("Test accuracy:", test_accuracy)

--------------------------------------------------------------
7. Make Predictions

predictions = model.predict(X_test)

------------------------------------------------------------
8. Save / Load the Model (Optional)

# Save
model.save('my_model.h5')

# Load
model = tf.keras.models.load_model('my_model.h5')





































































































